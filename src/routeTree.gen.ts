/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './pages/__root.lazy'
import { Route as LoginImport } from './pages/login'
import { Route as Index1Import } from './pages/index1'
import { Route as GalleryImport } from './pages/gallery'
import { Route as DetailImport } from './pages/detail'
import { Route as BlogImport } from './pages/blog'
import { Route as ArticlesImport } from './pages/articles'
import { Route as AboutImport } from './pages/about'
import { Route as RouteImport } from './pages/route'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const Index1Route = Index1Import.update({
  id: '/index1',
  path: '/index1',
  getParentRoute: () => rootRoute,
} as any)

const GalleryRoute = GalleryImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRoute,
} as any)

const DetailRoute = DetailImport.update({
  id: '/detail',
  path: '/detail',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesRoute = ArticlesImport.update({
  id: '/articles',
  path: '/articles',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const RouteRoute = RouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/articles': {
      id: '/articles'
      path: '/articles'
      fullPath: '/articles'
      preLoaderRoute: typeof ArticlesImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/detail': {
      id: '/detail'
      path: '/detail'
      fullPath: '/detail'
      preLoaderRoute: typeof DetailImport
      parentRoute: typeof rootRoute
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryImport
      parentRoute: typeof rootRoute
    }
    '/index1': {
      id: '/index1'
      path: '/index1'
      fullPath: '/index1'
      preLoaderRoute: typeof Index1Import
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof RouteRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/blog': typeof BlogRoute
  '/detail': typeof DetailRoute
  '/gallery': typeof GalleryRoute
  '/index1': typeof Index1Route
  '/login': typeof LoginRoute
}

export interface FileRoutesByTo {
  '/': typeof RouteRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/blog': typeof BlogRoute
  '/detail': typeof DetailRoute
  '/gallery': typeof GalleryRoute
  '/index1': typeof Index1Route
  '/login': typeof LoginRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof RouteRoute
  '/about': typeof AboutRoute
  '/articles': typeof ArticlesRoute
  '/blog': typeof BlogRoute
  '/detail': typeof DetailRoute
  '/gallery': typeof GalleryRoute
  '/index1': typeof Index1Route
  '/login': typeof LoginRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/articles'
    | '/blog'
    | '/detail'
    | '/gallery'
    | '/index1'
    | '/login'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/articles'
    | '/blog'
    | '/detail'
    | '/gallery'
    | '/index1'
    | '/login'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/articles'
    | '/blog'
    | '/detail'
    | '/gallery'
    | '/index1'
    | '/login'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  AboutRoute: typeof AboutRoute
  ArticlesRoute: typeof ArticlesRoute
  BlogRoute: typeof BlogRoute
  DetailRoute: typeof DetailRoute
  GalleryRoute: typeof GalleryRoute
  Index1Route: typeof Index1Route
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  AboutRoute: AboutRoute,
  ArticlesRoute: ArticlesRoute,
  BlogRoute: BlogRoute,
  DetailRoute: DetailRoute,
  GalleryRoute: GalleryRoute,
  Index1Route: Index1Route,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.lazy.tsx",
      "children": [
        "/",
        "/about",
        "/articles",
        "/blog",
        "/detail",
        "/gallery",
        "/index1",
        "/login"
      ]
    },
    "/": {
      "filePath": "route.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/articles": {
      "filePath": "articles.tsx"
    },
    "/blog": {
      "filePath": "blog.tsx"
    },
    "/detail": {
      "filePath": "detail.tsx"
    },
    "/gallery": {
      "filePath": "gallery.tsx"
    },
    "/index1": {
      "filePath": "index1.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
